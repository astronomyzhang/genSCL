FUNCTION_BLOCK "FB_WarehouseManagement"
{ S7_Optimized_Access := 'TRUE' }
   VAR_INPUT 
      requestIn : Bool := FALSE;
      requestOut : Bool := FALSE;
   END_VAR

   VAR_OUTPUT 
      productNum : Int := 0;
      libFreeNum : Int := 9;
      error : Bool := FALSE;
      status : Word := 16#0000;
   END_VAR

   VAR_IN_OUT 
      library : Array[1..9] of Bool := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
   END_VAR

   VAR 
      i : INT;
      errFull : Word := 16#8001;
      errEmpty : Word := 16#8002;
   END_VAR

BEGIN
     // 初始化error和status变量
     #error := FALSE;
     #status := 16#0000;

     // 入库逻辑
     IF #requestIn THEN
        // 从编号大的位置开始查找空闲位置
        FOR #i := 9 TO 1 BY -1 DO
           IF NOT #library[i] THEN
              // 找到空闲位置，更新状态
              #library[i] := TRUE;
              #productNum := productNum + 1;
              #libFreeNum := libFreeNum - 1;
              EXIT;
           END_IF;
        END_FOR;
        
        // 如果没有找到空闲位置，则报错
        IF #i = 0 THEN
           #error := TRUE;
           #status := #errFull;
        END_IF;
     END_IF;

     // 出库逻辑
     IF #requestOut THEN
        // 从编号小的位置开始查找工件
        FOR #i := 1 TO 9 DO
           IF #library[i] THEN
              // 找到工件，更新状态
              #library[i] := FALSE;
              #productNum := #productNum - 1;
              #libFreeNum := #libFreeNum + 1;
              EXIT;
           END_IF;
        END_FOR;
        
        // 如果没有找到工件，则报错
        IF #i > 9 THEN
           #error := TRUE;
           #status := #errEmpty;
        END_IF;
     END_IF;
END_FUNCTION_BLOCK